template<class T>
class stack
{
public:
    // Constructor
    stack(int stackCapacity = 10);

    // Check if the stack is empty
    bool empty() const;

    // Return the top element
    T& top() const;

    // Insert a new element at top
    void push(const T& element);

    // Delete one element from top
    void pop();

    // Return the number of elements
    int size() const;
private:
    T* _stack;
    int top_idx; // initial value = -1
    int capacity;
};

template<class T>
stack<T>::stack(int stackCapacity)
{
    if(stackCapacity < 1)
        throw "stackCapacity must be > 0.";

    _stack = new T[stackCapacity];
    top_idx = -1;
    capacity = stackCapacity;
}

template<class T>
bool stack<T>::empty() const
{
    return top_idx == -1;
}

template<class T>
T& stack<T>::top() const
{
    if(empty())
        throw "Stack is empty. No top element.";

    return _stack[top_idx];
}

template<class T>
void stack<T>::push(const T& element)
{   // Add element to stack
    if(top_idx == capacity - 1){
        // resize
        T* temp = _stack;
        _stack = new T[2*capacity];
        for(int i=0; i<=top_idx; i++){
            _stack[i] = temp[i];
        }
        //delete [] temp;
        capacity *= 2;
    }
    _stack[++top_idx] = element;
}

template<class T>
void stack<T>::pop()
{   // Delete top element from stack
    if(empty())
        throw "Stack is empty. Cannot pop.";

    //_stack[top--].~T();
    top_idx--;
}

template<class T>
int stack<T>::size() const
{
    return top_idx + 1;
}
