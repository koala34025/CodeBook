template<class T1, class T2>
struct pr {
    // Remove constructors just for brace-enclosed initializer
    T1 first;
    T2 second;
};

template<class T1, class T2>
bool operator ==(const pr<T1, T2> &lhs, const pr<T1, T2> &rhs)
{
    return (lhs.first == rhs.first && lhs.second == rhs.second);
}

template<class T1, class T2>
bool operator !=(const pr<T1, T2> &lhs, const pr<T1, T2> &rhs)
{
    return (!(lhs == rhs));
}

template<class T1, class T2>
bool operator <(const pr<T1, T2> &lhs, const pr<T1, T2> &rhs)
{
    return (lhs.first < rhs.first || (!(rhs.first < lhs.first) && lhs.second < rhs.second));
}

template<class T1, class T2>
bool operator >(const pr<T1, T2> &lhs, const pr<T1, T2> &rhs)
{
    return (rhs < lhs);
}

template<class T1, class T2>
bool operator <=(const pr<T1, T2> &lhs, const pr<T1, T2> &rhs)
{
    return (!(rhs < lhs));
}

template<class T1, class T2>
bool operator >=(const pr<T1, T2> &lhs, const pr<T1, T2> &rhs)
{
    return (!(lhs < rhs));
}
