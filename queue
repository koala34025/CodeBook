template<class T>
class queue // A finite ordered list
{
public:
    // Constructor
    queue(int queueCapacity = 10);

    // Check if the queue is empty
    bool empty() const;

    // Return the front element
    T& front() const;

    // Return the back element
    T& back() const;

    // Insert a new element at back
    void push(const T& element);

    // Delete one element from front
    void pop();

    // Return the number of elements
    int size() const;
private:
    T* _queue;
    int front_idx, back_idx; // initial value = -1
    // (front_idx, back_idx]
    int capacity;
    int _size;
};

template<class T>
queue<T>::queue(int queueCapacity)
{
    if(queueCapacity < 1)
        throw "queueCapacity must be > 0.";

    _queue = new T[queueCapacity];
    front_idx = -1;
    back_idx = -1;
    capacity = queueCapacity;
    _size = 0;
}

template<class T>
bool queue<T>::empty() const
{
    return front_idx == back_idx;
}

template<class T>
T& queue<T>::front() const
{
    if(empty())
        throw "Queue is empty. No front element.";

    return _queue[(front_idx+1)%capacity];
}

template<class T>
T& queue<T>::back() const
{
    if(empty())
        throw "Queue is empty. No back element.";

    return _queue[back_idx];
}

template<class T>
void queue<T>::push(const T& element)
{   // Add element at back of queue
    if((back_idx+1)%capacity == front_idx){
        // resize
        T* temp = _queue;
        _queue = new T[2*capacity];
        int new_back_idx = -1;
        for(int i=(front_idx+1)%capacity; ; i=(i+1)%capacity){
            _queue[++new_back_idx] = temp[i];
            if(i == back_idx)
                break;
        }
        capacity *= 2;
        back_idx = new_back_idx;
        front_idx = capacity - 1;
    }
    back_idx = (back_idx+1)%capacity;
    _queue[back_idx] = element;
    _size++;
}

template<class T>
void queue<T>::pop()
{   // Delete front element from queue
    if(empty())
        throw "Queue is empty. Cannot pop.";

    front_idx = (front_idx+1)%capacity;
    //_queue[front_idx].~T();
    _size--;
}

template<class T>
int queue<T>::size() const
{
    return _size;
}
